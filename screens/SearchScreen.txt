import React, { useState, useEffect } from 'react';
import {
  View,
  TextInput,
  Button,
  FlatList,
  Text,
  Image,
  TouchableOpacity,
  StyleSheet,
  ActivityIndicator,
  StatusBar,
  Platform,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useMusicPlayer } from '../services/MusicPlayer';
import { useNavigation } from '@react-navigation/native';

const API_BASE_URL = 'https://instinctually-monosodium-shawnda.ngrok-free.app';

interface SearchResult {
  title: string;
  thumbnail_url: string;
  videoId: string;
  uploader: string;
  duration: string;
}

const SearchScreen = () => {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isInputFocused, setIsInputFocused] = useState(false);
  const { playTrack, currentTrack } = useMusicPlayer();
  const navigation = useNavigation();

  // ✅ Hide/show header based on states
  useEffect(() => {
    const shouldHideHeader =
      isInputFocused || isLoading || searchResults.length > 0 || !!currentTrack;
    navigation.setOptions({ headerShown: !shouldHideHeader });
  }, [isInputFocused, isLoading, searchResults, currentTrack, navigation]);

  // ✅ Handle status bar color consistently
  useEffect(() => {
    if (Platform.OS === 'android') {
      StatusBar.setBackgroundColor('#121212', true);
      StatusBar.setBarStyle('light-content', true);
    }
  }, [isInputFocused]);

  const handleSearch = async () => {
    if (!searchQuery.trim()) return;
    setIsLoading(true);
    setSearchResults([]);
    try {
      const response = await fetch(
        `${API_BASE_URL}/search?q=${encodeURIComponent(searchQuery)}`
      );
      const data = await response.json();
      setSearchResults(data);
    } catch (error) {
      console.error('Search failed:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputFocus = () => {
    setIsInputFocused(true);
    // Keep status bar consistent
    if (Platform.OS === 'android') {
      StatusBar.setBackgroundColor('#282828', true);
    }
  };

  const handleInputBlur = () => {
    setIsInputFocused(false);
    // Reset status bar
    if (Platform.OS === 'android') {
      StatusBar.setBackgroundColor('#121212', true);
    }
  };

  const renderSearchResult = ({ item }: { item: SearchResult }) => (
    <TouchableOpacity style={styles.trackItem} onPress={() => playTrack(item)}>
      <Image source={{ uri: item.thumbnail_url }} style={styles.thumbnail} />
      <View style={styles.trackInfo}>
        <Text style={styles.trackTitle} numberOfLines={2}>
          {item.title}
        </Text>
        <Text style={styles.trackUploader}>{item.uploader}</Text>
        <Text style={styles.trackDuration}>{item.duration}</Text>
      </View>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <StatusBar 
        barStyle="light-content" 
        backgroundColor="#121212"
        translucent={false}
      />
      {/* ✅ Search container - moves up when header disappears */}
      <SafeAreaView style={styles.searchContainer} edges={['top', 'left', 'right']}>
        <TextInput
          style={styles.searchInput}
          placeholder="Search for a song..."
          placeholderTextColor="#888"
          value={searchQuery}
          onChangeText={setSearchQuery}
          onSubmitEditing={handleSearch}
          onFocus={handleInputFocus}
          onBlur={handleInputBlur}
        />
        <TouchableOpacity style={styles.searchButton} onPress={handleSearch}>
          <Text style={styles.searchButtonText}>SEARCH</Text>
        </TouchableOpacity>
      </SafeAreaView>

      {/* ✅ Content area */}
      <SafeAreaView style={styles.contentArea} edges={['left', 'right', 'bottom']}>
        {isLoading ? (
          <ActivityIndicator size="large" color="#1DB954" style={styles.loader} />
        ) : (
          <FlatList
            data={searchResults}
            renderItem={renderSearchResult}
            keyExtractor={(item) => item.videoId}
            ListEmptyComponent={
              <Text style={styles.emptyText}>
                No results found. Start by searching for a song.
              </Text>
            }
            contentContainerStyle={styles.flatListContent}
            showsVerticalScrollIndicator={false}
          />
        )}
      </SafeAreaView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { 
    flex: 1, 
    backgroundColor: '#121212' 
  },
  
  // ✅ Custom header styles
  headerArea: {
    backgroundColor: '#121212',
  },
  customHeader: {
    height: 56,
    backgroundColor: '#121212',
    justifyContent: 'center',
    alignItems: 'center',
    borderBottomWidth: 0, // Remove any border
  },
  headerTitle: {
    color: '#fff',
    fontSize: 20,
    fontWeight: 'bold',
  },
  
  // ✅ Search container - no margins/padding that create gaps
  searchContainer: {
    flexDirection: 'row',
    paddingHorizontal: 16,
    paddingVertical: 12,
    backgroundColor: '#282828',
    alignItems: 'center',
    marginTop: 0,
    borderTopWidth: 0,
  },
  searchContainerFocused: {
    paddingTop: 0, 
    paddingBottom: 12, // Extra padding when it moves to top
  },
  searchInput: {
    flex: 1,
    height: 40,
    backgroundColor: '#404040',
    borderRadius: 20,
    paddingHorizontal: 16,
    color: '#fff',
    fontSize: 16,
    marginRight: 12,
  },
  searchButton: {
    backgroundColor: '#1DB954',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 20,
  },
  searchButtonText: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 14,
  },
  
  // ✅ Content area
  contentArea: {
    flex: 1,
    backgroundColor: '#121212',
  },
  loader: { 
    marginTop: 50 
  },
  emptyText: { 
    textAlign: 'center', 
    marginTop: 50, 
    color: '#aaa',
    fontSize: 16,
    paddingHorizontal: 20,
  },
  trackItem: {
    flexDirection: 'row',
    padding: 12,
    backgroundColor: '#121212',
    borderBottomWidth: 1,
    borderBottomColor: '#333',
  },
  thumbnail: { 
    width: 60, 
    height: 60, 
    borderRadius: 4, 
    marginRight: 12 
  },
  trackInfo: { 
    flex: 1, 
    justifyContent: 'center' 
  },
  trackTitle: { 
    color: '#fff', 
    fontSize: 16, 
    fontWeight: 'bold',
    marginBottom: 4,
  },
  trackUploader: { 
    color: '#aaa', 
    fontSize: 14,
    marginBottom: 2,
  },
  trackDuration: { 
    color: '#aaa', 
    fontSize: 12 
  },
  flatListContent: { 
    paddingBottom: 140 
  },
});

export default SearchScreen;  #121212